# Script Created by Roberta Peixoto in 04/26/2024 based on Introduction to @fluxfinder package
# to process GHG fluxes from different compartments (Macrophytes chambers, Tree Stems chambers, etc...).

# This script analyze data per Licor/equipment serial number: 
# You can have many files from the same equipment (SN) in your folder, 
# but not from two different equipment(#SNs) in order to avoiding duplicates per TIMESTAMP

# This code also consider varying temperature, volume, and area per chamber unity/obs. 
#You have to input these values in your metadata file


#installing flux finder package
remotes::install_github("COMPASS-DOE/fluxfinder")
library(fluxfinder)

#reading all files from the same equipment serial number
data_files <- list.files("C:/Users/rbitten/OneDrive - University of Toledo/Documents/R-Analysis/MACflux/",
                         pattern = "*data$",
                         full.names = TRUE)
data_list <- list()
for (file in data_files) {
  data_list[[file]] <- ffi_read_LI7810(file)
}

dat <- do.call(rbind, data_list)

#setting up day from TIMESTAMP
library(tidyverse)

dat<-dat%>%
  mutate(Date=as.Date(TIMESTAMP))

#checking chambers
library(ggplot2)
ggplot(dat, aes(TIMESTAMP, CO2)) + geom_point() # sometimes it is too much data to plot
#alternative plot for a subset of the data 
#ggplot(dat[1500:2000, ], aes(TIMESTAMP, CO2)) + geom_point() # you can vary or lines here

#reading metadata with data only for the licor serial number you entered in the data_files above 
md<-("C:/Users/rbitten/OneDrive - University of Toledo/Documents/R-Analysis/MACflux/test_LE_GHG_TG_10_01028.csv")

metadat <- read.csv(md)

#matching metadata with licor data
dat$metadat_row <- ffi_metadata_match(
  data_timestamps = dat$TIMESTAMP,
  start_dates = metadat$Date, #make sure you have your start_date in the YYY-MM-DD format
  start_times = metadat$Start_time,
  obs_lengths = metadat$Obs_length + 10)

dat$Plot <- metadat$Plot[dat$metadat_row]
metadat$metadat_row <- seq_len(nrow(metadat))
metadat$Date <- as.Date(metadat$Date)

#merging metadata with data -> use this if you have a unique ID per sample in the Plot column

#dat_changing_vol <- merge(dat, metadat[c("Plot", "volume", "Temp", "Treatment", "Area")], by = "Plot", all.x = TRUE) #it is generating an average data per plot combining different measurements

#'merging' data and metadata with inner_join if you don't have a unique id for Plot
dat_changing_vol <- inner_join(dat, metadat, by = c("Plot", "Date"), relationship = "many-to-many")

#unity conversion
dat_changing_vol$CO2_umol <- ffi_ppm_to_umol(dat_changing_vol$CO2,
                                             volume = dat_changing_vol$volume, #Vol=m3
                                             temp = dat_changing_vol$Temp) #oC

dat_changing_vol$CO2_umol_m2 <- dat_changing_vol$CO2_umol / dat_changing_vol$Area

#calculating fluxes based on varying volume, temp, and areas from the metadata file
fluxes <- ffi_compute_fluxes(
  dat_changing_vol,
  group_column = c("Plot", "Date"), # If you have the unique ID use group_column = "Plot"
  time_column = "TIMESTAMP",
  gas_column = "CO2_umol_m2",
  dead_band = 10)


#Comparing r2
ggplot(fluxes, aes(Plot, flux_estimate, color = adj.r.squared)) +
  geom_point() +
  geom_linerange(aes(ymin = flux_estimate - flux_std.error,
                     ymax = flux_estimate + flux_std.error)) +
  ylab("CO2 flux (Âµmol/m2/s)")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

#comparing fluxes calculation
ggplot(fluxes, aes(flux_estimate, flux_estimate_robust, color = Plot)) +
  geom_point() + geom_abline() + theme(legend.position = "none")
ggplot(fluxes, aes(adj.r.squared, r.squared_poly, color = Plot)) +
  geom_point() + geom_abline() + theme(legend.position="none")


#if you want to check a specific time interval of data that fluxes were computed
slopes_filter <- dat %>%
           filter( CH4<4000 &CH4>-2, #removing errors from Licor warming period
                TIMESTAMP > as.POSIXct("2023-07-13 11:55:49"),
                   TIMESTAMP < as.POSIXct("2023-07-13 12:00:49"))
 ggplot(data = slopes_filter, aes(x = TIMESTAMP, y = CH4)) +
      geom_point() +
       #geom_smooth(method="lm")+  # if you want to double check the linear phase you can use this function to draw the linear regression
    xlab("Timestamp") +
       ylab("CH4")

